# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, echo = FALSE, warning = FALSE)
# Chunk 2
# YOUR CODE HERE
# Install required packages if not already installed
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("readr")) install.packages("readr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("knitr")) install.packages("knitr")
if (!require("kableExtra")) install.packages("kableExtra")
# Load the packages into the R session
library(tidyverse)  # for data manipulation and visualization
library(readr)      # for reading data
library(ggplot2)    # for creating plots
library(dplyr)      # for data manipulation
library(knitr)      # for knitting document
library(kableExtra) # for creating nice tables
# Chunk 3
# YOUR CODE HERE
# Load classified images of tally sheets
d_tally <- read_csv("data/classification.txt",
col_names = FALSE,
col_types = cols(
X1 = col_character(),
X2 = col_character(),
X3 = col_character()
))
# Rename the columns
names(d_tally) <- c("name_image", "label", "probability")
# Print the table
print(d_tally)
# Chunk 4
# YOUR CODE HERE
# Clean label and probability columns
d_tally <- d_tally %>%
mutate(
label = str_replace_all(label, "\\[\\[(\\d)\\]\\]", "\\1") %>% as.numeric(),
probability = str_replace_all(probability, "\\[\\[ (.*?)\\]\\]", "\\1") %>% as.numeric()
)
# Print the table
print(d_tally)
# Summary statistics
summary(d_tally$label)
summary(d_tally$probability)
# Chunk 5
# YOUR CODE HERE
# Extract state and district information from name_image
d_tally <- d_tally %>%
separate(name_image, into = c("state", "district", "remainder"), sep = "_", remove = FALSE, extra = "merge") %>%
mutate(district = str_replace(district, "_(.*).jpg", ""))
# Print the table
print(d_tally)
# Chunk 6
# YOUR CODE HERE
# Re-code a state's name using ifelse
d_tally <- d_tally %>%
mutate(state = ifelse(state == "Estado de Mexico", "Edomex", state))
# Print the table
print(d_tally)
# Create a histogram of fraud_proba
ggplot(d_tally, aes(x = fraud_proba)) +
geom_histogram(binwidth = 0.05, fill = "steelblue", color = "black") +
theme_minimal() +
labs(title = "Distribution of Fraud Probability",
x = "Fraud Probability",
y = "Frequency")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, echo = FALSE, warning = FALSE)
# Chunk 2
# YOUR CODE HERE
# Install required packages if not already installed
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("readr")) install.packages("readr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("knitr")) install.packages("knitr")
if (!require("kableExtra")) install.packages("kableExtra")
# Load the packages into the R session
library(tidyverse)  # for data manipulation and visualization
library(readr)      # for reading data
library(ggplot2)    # for creating plots
library(dplyr)      # for data manipulation
library(knitr)      # for knitting document
library(kableExtra) # for creating nice tables
# Chunk 3
# YOUR CODE HERE
# Load classified images of tally sheets
d_tally <- read_csv("data/classification.txt",
col_names = FALSE,
col_types = cols(
X1 = col_character(),
X2 = col_character(),
X3 = col_character()
))
# Rename the columns
names(d_tally) <- c("name_image", "label", "probability")
# Print the table
print(d_tally)
# Chunk 4
# YOUR CODE HERE
# Clean label and probability columns
d_tally <- d_tally %>%
mutate(
label = str_replace_all(label, "\\[\\[(\\d)\\]\\]", "\\1") %>% as.numeric(),
probability = str_replace_all(probability, "\\[\\[ (.*?)\\]\\]", "\\1") %>% as.numeric()
)
# Print the table
print(d_tally)
# Summary statistics
summary(d_tally$label)
summary(d_tally$probability)
# Chunk 5
# YOUR CODE HERE
# Extract state and district information from name_image
d_tally <- d_tally %>%
separate(name_image, into = c("state", "district", "remainder"), sep = "_", remove = FALSE, extra = "merge") %>%
mutate(district = str_replace(district, "_(.*).jpg", ""))
# Print the table
print(d_tally)
# Chunk 6
# YOUR CODE HERE
# Re-code a state's name using ifelse
d_tally <- d_tally %>%
mutate(state = ifelse(state == "Estado de Mexico", "Edomex", state))
# Print the table
print(d_tally)
# Chunk 7
# YOUR CODE HERE
# Create a fraud_proba indicator and drop label and probability columns using ifelse
d_tally <- d_tally %>%
mutate(fraud_proba = ifelse(label == 1, probability, 1 - probability)) %>%
select(-label, -probability)
# Print the table
print(d_tally)
# Chunk 8
# YOUR CODE HERE
# Create a binary fraud indicator
d_tally <- d_tally %>%
mutate(fraud_bin = fraud_proba >= 2/3)
# Print the table
print(d_tally)
# Create a histogram of fraud_proba
ggplot(d_tally, aes(x = fraud_proba)) +
geom_histogram(binwidth = 0.05, fill = "steelblue", color = "black") +
theme_minimal() +
labs(title = "Distribution of Fraud Probability",
x = "Fraud Probability",
y = "Frequency")
# Method 2: density plot
ggplot(d_tally, aes(x = fraud_proba)) +
geom_density(fill = "steelblue") +
theme_minimal() +
labs(title = "Density of Fraud Probability",
x = "Fraud Probability",
y = "Density")
# YOUR CODE HERE
# Method 1: barplot
ggplot(d_tally, aes(x = fraud_bin)) +
geom_bar(fill = "steelblue", color = "black") +
theme_minimal() +
labs(title = "Distribution of Fraud Indicator",
x = "Fraud Indicator",
y = "Count")
# Method 2: pie chart
fraud_counts <- d_tally %>%
group_by(fraud_bin) %>%
summarise(n = n())
ggplot(fraud_counts, aes(x = "", y = n, fill = factor(fraud_bin))) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_minimal() +
labs(fill = "Fraud Indicator",
title = "Proportion of Fraud Indicator") +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create a new object with state-level indicators of fraud prevalence
state_fraud <- d_tally %>%
group_by(state) %>%
summarise(n_fraud = sum(fraud_bin),
prop_fraud = mean(fraud_bin) * 100)
# Print the table
print(state_fraud)
# Create a barplot of the frequencies of fraudulent tallies by state
ggplot(state_fraud, aes(x = reorder(state, n_fraud), y = n_fraud)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black") +
theme_minimal() +
coord_flip() +
labs(title = "Fraudulent Tally Frequencies by State",
x = "State",
y = "Frequency of Fraudulent Tallies")
# Create a barplot of the frequencies of fraudulent tallies by state
ggplot(state_fraud, aes(x = reorder(state, n_fraud), y = n_fraud)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black") +
theme_minimal() +
coord_flip() +
labs(title = "Prevalence of fraud",
x = "State",
y = "number of Fraudulent Tallies")
ggplot(state_fraud, aes(x = reorder(state, -prop_fraud), y = prop_fraud)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black") +
theme_minimal() +
coord_flip() +
labs(title = "Prevalence of fraud",
x = "State",
y = "% of Fraudulent Tallies")
ggplot(state_fraud, aes(x = reorder(state, prop_fraud), y = prop_fraud)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black") +
theme_minimal() +
coord_flip() +
labs(title = "Prevalence of fraud",
x = "State",
y = "% of Fraudulent Tallies")
? geom_text_repel()
# Install the ggrepel package if not already installed
if (!require("ggrepel")) install.packages("ggrepel")
# Load the package into the R session
library(ggrepel)
# Create a scatterplot of the proportions and frequencies of fraudulent tallies by state
ggplot(state_fraud, aes(x = n_fraud, y = prop_fraud, label = state)) +
geom_point(color = "steelblue") +
geom_text_repel() +
theme_minimal() +
labs(title = "Proportions and Frequencies of Fraudulent Tally Sheets by State",
x = "Frequency of Fraudulent Tally Sheets",
y = "Proportion of Fraudulent Tally Sheets (%)")
# YOUR CODE
# Load the data
d_return <- read.csv("data/VoteReturns.csv")
# Show summary statistics
summary(d_return)
tinytex::install_tinytex()
# Recode the names of the states
d_return <- d_return %>%
mutate(edo = recode(edo,
"Chihuhua" = "Chihuahua",
"Edomex" = "Estado de Mexico"))
# Summarize district identifiers in d_tally
d_tally %>%
group_by(district) %>%
summarise(n = n(), .groups = 'drop')
# Summarize district identifiers in d_return
d_return %>%
group_by(dto) %>%
summarise(n = n(), .groups = 'drop')
# Convert dto to Roman numerals
d_return <- d_return %>%
mutate(dto = as.roman(dto))
# Create the name_image column
d_return <- d_return %>%
mutate(name_image = paste(edo, dto, foto, sep = "_")) %>%
select(name_image, everything())
# Convert to lower case and remove .jpg in d_return
d_return <- d_return %>%
mutate(name_image = tolower(name_image),
name_image = sub("\\.jpg$", "", name_image))
# Convert to lower case and remove .jpg in d_tally
d_tally <- d_tally %>%
mutate(name_image = tolower(name_image),
name_image = sub("\\.jpg$", "", name_image))
# Rows in d_return but not in d_tally
d_return_not_in_tally <- anti_join(d_return, d_tally, by = "name_image")
nrow(d_return_not_in_tally)  # Number of such rows
d_return_not_in_tally %>% group_by(state, district) %>% summarise(n = n(), .groups = 'drop')  # States and districts they're from
# Rows in d_tally but not in d_return
d_tally_not_in_return <- anti_join(d_tally, d_return, by = "name_image")
nrow(d_tally_not_in_return)  # Number of such rows
d_tally_not_in_return %>% group_by(state, district) %>% summarise(n = n(), .groups = 'drop')  # States and districts they're from
# YOUR CODE HERE
# Create d by joining d_return and d_tally
d <- inner_join(d_return, d_tally, by = "name_image")
print(d)
# Create new columns
d <- d %>%
mutate(
total_president = salinas + clouthier + cardenas + ibarra + castillo,
salinas_prop = salinas / total_president,
cardenas_prop = cardenas / total_president,
clouthier_prop = clouthier / total_president
)
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Proportion of votes", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with alterations", "Tallies identified with no alterations")) +
xlim(0, 1)
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Proportion of votes", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
# Create the density plot
ggplot(df_melted, aes(x = value, fill = variable)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("lightblue", "lightblue", "orange")) +
labs(x = "Value", y = "Density", fill = "Variable") +
theme_minimal()
# Create the density plot for Salinas
ggplot(df, aes(x = Salinas)) +
geom_density(fill = "lightblue", alpha = 0.5) +
labs(x = "Vote Proportion", y = "Density", title = "Salinas") +
theme_minimal()
ggplot(d, aes(x=cardenas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Proportion of votes", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
ggplot(d, aes(x=clouthier_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Proportion of votes", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Voting share", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c(fill=="lightblue", color=="lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Voting share", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c(fill="lightblue", color="lightblue" , "orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Voting share", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c(fill="lightblue", color="lightblue" , fill="orange",color="orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
# Create the density plot for Salinas
ggplot(df, aes(x = Salinas_prop)) +
geom_density(fill = "lightblue", colour = "lightblue", alpha = 0.5) +
labs(x = "Vote Proportion", y = "Density", title = "Salinas") +
theme_minimal()
# YOUR CODE HERE
# design using density plots
ggplot(d, aes(x=salinas_prop, fill=fraud_bin)) +
geom_density(data = subset(d, fraud_bin == FALSE), alpha=0.5) +
geom_density(data = subset(d, fraud_bin == TRUE), alpha=0.5) +
labs(title="Proportion of votes for Salinas on tally sheets",
x="Voting share", y="Density") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("lightblue" ,"orange" ), name = "Fraud", labels = c("Tallies identified with no alterations", "Tallies identified with alterations")) +
xlim(0, 1)
